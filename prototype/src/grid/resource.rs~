mod resource{
    #[derive(Debug, Clone, Copy)]
    enum resource_kind{
	Water,
	Iron,
	Carbon,
	None,
    }

    #[derive(Debug, Clone, Copy)]
    struct resource{
	amount : u64,
	kind : resource_kind,
    }

    impl resource{

	fn new(q : u64, k : resource_kind) -> resource {
	    resource{
		amount : q,
		kind : k,
	    }
	}
	
	fn exploit(&mut self, quantity : u64) -> (u64, resource_kind) {
	    if self.amount <= quantity {
		self.amount = 0;
		(self.amount, self.kind)
	    } else {
		self.amount = self.amount - quantity;
		let k = self.kind.clone();
		(quantity, k)
	    }   
	}
    }
}
